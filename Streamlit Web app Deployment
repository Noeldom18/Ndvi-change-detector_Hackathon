# app.py
import streamlit as st
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image

# -------------------------------
# Load Model
# -------------------------------
class NDVIRegressor(nn.Module):
    def __init__(self):
        super(NDVIRegressor, self).__init__()
        self.resnet = models.resnet18(pretrained=True)
        self.resnet.fc = nn.Linear(self.resnet.fc.in_features, 1)

    def forward(self, x):
        return self.resnet(x)

# Load the trained model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = NDVIRegressor().to(device)
model.load_state_dict(torch.load("ndvi_regressor.pth", map_location=device))
model.eval()

# -------------------------------
# Image Transform
# -------------------------------
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# -------------------------------
# Streamlit App
# -------------------------------
st.title("ðŸŒ± NDVI Prediction from Drone Images")
st.write("Upload a drone image (RGB) to predict NDVI value for crop monitoring.")

# File uploader
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption='Uploaded Image', use_column_width=True)
    
    # Transform image
    input_image = transform(image).unsqueeze(0).to(device)
    
    # Predict NDVI
    with torch.no_grad():
        ndvi_value = model(input_image).item()
    
    # Display result
    st.subheader("Predicted NDVI Value:")
    st.write(f"{ndvi_value:.3f}")

    # Optional: Simple health interpretation
    if ndvi_value < 0.2:
        st.warning("Bare soil / low vegetation")
    elif ndvi_value < 0.5:
        st.info("Early growth / moderate vegetation")
    elif ndvi_value < 0.8:
        st.success("Healthy vegetation")
    else:
        st.success("Dense vegetation / very healthy")
